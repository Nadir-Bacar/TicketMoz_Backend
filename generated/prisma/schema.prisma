// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String?
//   email     String?  @unique
//   password  String?
//   user_type String?
//   status    String?
//   nrBi      String?
//   urlDocument String?
//   token     String?
//   companyId   String?  @db.ObjectId
//   company    Company? @relation(fields: [companyId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime? @updatedAt
//   ticket ticket[]

//   TicketValidationLog TicketValidationLog[]
// }

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  password  String
  user_type String
  token     String?
  company   Company?

  isVerify  Boolean?  @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  SalesTickets SalesTickets[]

  UserEvent UserEvent[]
}

model Company {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  phone_number String
  nuit_url     String?
  events       Event[]
  isVerify     Boolean?  @default(false)
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Event {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  category      String
  location      String
  image         String
  event_date    String
  start_time    String
  end_time      String
  status        String         @default("pendente")
  userEvent     UserEvent[]
  inviteScanner InviteScanner?
  ticket        Ticket         @relation(fields: [ticketId], references: [id]) // Required
  ticketId      String         @unique @db.ObjectId // Owner side has the foreign key
  companyId     String         @db.ObjectId
  company       Company        @relation(fields: [companyId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
}

model InviteScanner {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  token         String   @unique
  total_scanner Int
  eventID       String   @unique @db.ObjectId
  event         Event    @relation(fields: [eventID], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  acceptedCount Int      @default(0)
  createdAt     DateTime @default(now())
}

model Ticket {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  ticketType TicketType[]
  event      Event?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
}

model TicketType {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  quantity     Int
  price        Float
  SalesTickets SalesTickets[]
  ticketId     String         @db.ObjectId
  ticket       Ticket         @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model SalesTickets {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  ticketTypeID  String     @db.ObjectId
  tiketType     TicketType @relation(fields: [ticketTypeID], references: [id], onDelete: Cascade)
  // quantity        Int
  qrCode        String
  paymentMethod String
  isUsed        Boolean    @default(false)
  userid        String     @db.ObjectId
  user          User?      @relation(fields: [userid], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model UserEvent {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  eventId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
